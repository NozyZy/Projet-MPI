<===================( Automate : #31 )======================>

 # d'états ----------> 8
 # de transitions ---> 12
 Etats --------------> [0, 1, 2, 3, 4, 5, 6, 7]
 Alphabet -----------> [a, b]


E--> **(0)**
(0)-*->(1)
(0)-*->(4)

 **(1)**
(1)-a->(2)
(1)-*->(3)

 **(2)**
(2)-b->(1)
(2)-a->(3)

 **(3)**
(3)-b->(3)
(3)-*->(7)

 **(4)**
(4)-b->(5)

 **(5)**
(5)-b->(6)

 **(6)**
(6)-*->(4)
(6)-*->(7)

 **(7)** -->S

<=================================================>

---------------------------> L'automate est déterministe
---------------------------> L'automate est standard
---------------------------> c : Complétion
---------------------------> b : Eliminer les transitions epsilon
---------------------------> a : Déterminisation complétion synchrone/asynchrone
---------------------------> m : Miniminisation
---------------------------> k : Langage complementaire

Complétion (c) :

L'automate #31 n'est pas complet, à cause des transitions manquantes :
 a ->  0a.  3a.  4a.  5a.  6a.  7a.
 b ->  0b.  1b.  6b.  7b.

<===================( Automate : Complet )======================>

 # d'états ----------> 9
 # de transitions ---> 24
 Etats --------------> [0, 1, 2, 3, 4, 5, 6, 7, P]
 Alphabet -----------> [a, b]


E--> **(0)**
(0)-*->(1)
(0)-*->(4)
(0)-a->(P)
(0)-b->(P)

 **(1)**
(1)-a->(2)
(1)-*->(3)
(1)-b->(P)

 **(2)**
(2)-b->(1)
(2)-a->(3)

 **(3)**
(3)-b->(3)
(3)-*->(7)
(3)-a->(P)

 **(4)**
(4)-b->(5)
(4)-a->(P)

 **(5)**
(5)-b->(6)
(5)-a->(P)

 **(6)**
(6)-*->(4)
(6)-*->(7)
(6)-a->(P)
(6)-b->(P)

 **(7)** -->S
(7)-a->(P)
(7)-b->(P)

 **(P)**
(P)-a->(P)
(P)-b->(P)

<=================================================>

Eliminer les transitions epsilon (b) :

L'automate #31 est asynchrone, à cause des transitions suivantes :
 0*1  0*4  1*3  3*7  6*4  6*7
<===================( Automate : Automate fini )======================>

 # d'états ----------> 6
 # de transitions ---> 9
 Etats --------------> [0', 1', 2', 3', 3'5', 3'6']
 Alphabet -----------> [a, b]


E--> **(0')** -->S
(0')-a->(2')
(0')-b->(3'5')

 **(3'5')** -->S
(3'5')-b->(3'6')

 **(3'6')** -->S
(3'6')-b->(3'5')

 **(2')**
(2')-a->(3')
(2')-b->(1')

 **(1')** -->S
(1')-a->(2')
(1')-b->(3')

 **(3')** -->S
(3')-b->(3')

<=================================================>

Déterminisation complétion synchrone/asynchrone (a) :

L'automate #31 est asynchrone, à cause des transitions suivantes :
 0*1  0*4  1*3  3*7  6*4  6*7
L'automate #31 n'est pas complet, à cause des transitions manquantes :
 a ->  0a.  3a.  4a.  5a.  6a.  7a.
 b ->  0b.  1b.  6b.  7b.

<===================( Automate : #31 )======================>

 # d'états ----------> 7
 # de transitions ---> 14
 Etats --------------> [0', 1', 2', 3', 3'5', 3'6', P]
 Alphabet -----------> [a, b]


E--> **(0')** -->S
(0')-a->(2')
(0')-b->(3'5')

 **(3'5')** -->S
(3'5')-b->(3'6')
(3'5')-a->(P)

 **(3'6')** -->S
(3'6')-b->(3'5')
(3'6')-a->(P)

 **(2')**
(2')-a->(3')
(2')-b->(1')

 **(1')** -->S
(1')-a->(2')
(1')-b->(3')

 **(3')** -->S
(3')-b->(3')
(3')-a->(P)

 **(P)**
(P)-a->(P)
(P)-b->(P)

<=================================================>

Minimisation (m) :

>>>    Fusion des Etats : 3'5' et de 3'6' ...
>>>    Fusion des Etats : 3' et de 3'5'3'6' ...

<===================( Automate : #31 )======================>

 # d'états ----------> 5
 # de transitions ---> 10
 Etats --------------> [0', 1', 2', 3'3'5'3'6', P]
 Alphabet -----------> [a, b]


 **(3'3'5'3'6')** -->S
(3'3'5'3'6')-a->(P)
(3'3'5'3'6')-b->(3'3'5'3'6')

E--> **(0')** -->S
(0')-a->('2)
(0')-b->(''35)

 **(2')**
(2')-a->(3'3'5'3'6')
(2')-b->(1')

 **(1')** -->S
(1')-a->(2')
(1')-b->(3'3'5'3'6')

 **(P)**
(P)-a->(P)
(P)-b->(P)

<=================================================>



Langage complémentaire (k) :

<===================( Automate : Complémentaire )======================>

 # d'états ----------> 7
 # de transitions ---> 14
 Etats --------------> [0', 1', 2', 3', 3'5', 3'6', P]
 Alphabet -----------> [a, b]


E--> **(0')** -->S
(0')-a->('2)
(0')-b->(''35)

 **(3'5')** -->S
(3'5')-b->(3'6')
(3'5')-a->(P)

 **(3'6')** -->S
(3'6')-b->(3'5')
(3'6')-a->(P)

 **(2')** -->S
(2')-a->(3')
(2')-b->(1')

 **(1')** -->S
(1')-a->(2')
(1')-b->(3')

 **(3')** -->S
(3')-b->(3')
(3')-a->(P)

 **(P)** -->S
(P)-a->(P)
(P)-b->(P)

<=================================================>