<===================( Automate : #33 )======================>

 # d'états ----------> 13
 # de transitions ---> 18
 Etats --------------> [0, 1, 10, 11, 12, 2, 3, 4, 5, 6, 7, 8, 9]
 Alphabet -----------> [a, b, c]


E--> **(0)**
(0)-*->(1)
(0)-*->(7)

 **(1)**
(1)-*->(2)
(1)-*->(4)

 **(2)**
(2)-a->(3)

 **(3)**
(3)-*->(5)

 **(4)**
(4)-b->(4)
(4)-*->(5)

 **(5)**
(5)-c->(6)

 **(6)**
(6)-*->(12)

 **(7)**
(7)-*->(8)
(7)-*->(9)

 **(8)**
(8)-a->(8)
(8)-*->(11)

 **(9)**
(9)-b->(10)

 **(10)**
(10)-*->(11)

 **(11)**
(11)-c->(11)
(11)-*->(12)

 **(12)** -->S

<=================================================>

---------------------------> L'automate est déterministe
---------------------------> L'automate est standard
---------------------------> c : Complétion
---------------------------> b : Eliminer les transitions epsilon
---------------------------> a : Déterminisation complétion synchrone/asynchrone
---------------------------> m : Miniminisation
---------------------------> k : Langage complementaire

Complétion (c) :

L'automate #33 n'est pas complet, à cause des transitions manquantes :
 a ->  0a.  1a.  3a.  4a.  5a.  6a.  7a.  9a.  10a.  11a.  12a.
 b ->  0b.  1b.  2b.  3b.  5b.  6b.  7b.  8b.  10b.  11b.  12b.
 c ->  0c.  1c.  2c.  3c.  4c.  6c.  7c.  8c.  9c.  10c.  12c.

<===================( Automate : Complet )======================>

 # d'états ----------> 14
 # de transitions ---> 54
 Etats --------------> [0, 1, 10, 11, 12, 2, 3, 4, 5, 6, 7, 8, 9, P]
 Alphabet -----------> [a, b, c]


E--> **(0)**
(0)-*->(1)
(0)-*->(7)
(0)-a->(P)
(0)-b->(P)
(0)-c->(P)

 **(1)**
(1)-*->(2)
(1)-*->(4)
(1)-a->(P)
(1)-b->(P)
(1)-c->(P)

 **(2)**
(2)-a->(3)
(2)-b->(P)
(2)-c->(P)

 **(3)**
(3)-*->(5)
(3)-a->(P)
(3)-b->(P)
(3)-c->(P)

 **(4)**
(4)-b->(4)
(4)-*->(5)
(4)-a->(P)
(4)-c->(P)

 **(5)**
(5)-c->(6)
(5)-a->(P)
(5)-b->(P)

 **(6)**
(6)-*->(12)
(6)-a->(P)
(6)-b->(P)
(6)-c->(P)

 **(7)**
(7)-*->(8)
(7)-*->(9)
(7)-a->(P)
(7)-b->(P)
(7)-c->(P)

 **(8)**
(8)-a->(8)
(8)-*->(11)
(8)-b->(P)
(8)-c->(P)

 **(9)**
(9)-b->(10)
(9)-a->(P)
(9)-c->(P)

 **(10)**
(10)-*->(11)
(10)-a->(P)
(10)-b->(P)
(10)-c->(P)

 **(11)**
(11)-c->(11)
(11)-*->(12)
(11)-a->(P)
(11)-b->(P)

 **(12)** -->S
(12)-a->(P)
(12)-b->(P)
(12)-c->(P)

 **(P)**
(P)-a->(P)
(P)-b->(P)
(P)-c->(P)

<=================================================>

Eliminer les transitions epsilon (b) :

L'automate #33 est asynchrone, à cause des transitions suivantes :
 0*1  0*7  1*2  1*4  3*5  4*5  6*12  7*8  7*9  8*11
 10*11  11*12
<===================( Automate : Automate fini )======================>

 # d'états ----------> 8
 # de transitions ---> 13
 Etats --------------> [0', 11', 3'8', 4', 4'10', 6', 6'11', 8']
 Alphabet -----------> [a, b, c]


E--> **(0')** -->S
(0')-a->(3'8')
(0')-b->(4'10')
(0')-c->(6'11')

 **(6'11')** -->S
(6'11')-c->(11')

 **(11')** -->S
(11')-c->(11')

 **(4'10')** -->S
(4'10')-b->(4')
(4'10')-c->(6'11')

 **(4')**
(4')-b->(4')
(4')-c->(6')

 **(6')** -->S

 **(3'8')** -->S
(3'8')-a->(8')
(3'8')-c->(6'11')

 **(8')** -->S
(8')-a->(8')
(8')-c->(11')

<=================================================>

Déterminisation complétion synchrone/asynchrone (a) :

L'automate #33 est asynchrone, à cause des transitions suivantes :
 0*1  0*7  1*2  1*4  3*5  4*5  6*12  7*8  7*9  8*11
 10*11  11*12
L'automate #33 n'est pas complet, à cause des transitions manquantes :
 a ->  0a.  1a.  3a.  4a.  5a.  6a.  7a.  9a.  10a.  11a.  12a.
 b ->  0b.  1b.  2b.  3b.  5b.  6b.  7b.  8b.  10b.  11b.  12b.
 c ->  0c.  1c.  2c.  3c.  4c.  6c.  7c.  8c.  9c.  10c.  12c.

<===================( Automate : #33 )======================>

 # d'états ----------> 9
 # de transitions ---> 27
 Etats --------------> [0', 11', 3'8', 4', 4'10', 6', 6'11', 8', P]
 Alphabet -----------> [a, b, c]


E--> **(0')** -->S
(0')-a->(3'8')
(0')-b->(4'10')
(0')-c->(6'11')

 **(6'11')** -->S
(6'11')-c->(11')
(6'11')-a->(P)
(6'11')-b->(P)

 **(11')** -->S
(11')-c->(11')
(11')-a->(P)
(11')-b->(P)

 **(4'10')** -->S
(4'10')-b->(4')
(4'10')-c->(6'11')
(4'10')-a->(P)

 **(4')**
(4')-b->(4')
(4')-c->(6')
(4')-a->(P)

 **(6')** -->S
(6')-a->(P)
(6')-b->(P)
(6')-c->(P)

 **(3'8')** -->S
(3'8')-a->(8')
(3'8')-c->(6'11')
(3'8')-b->(P)

 **(8')** -->S
(8')-a->(8')
(8')-c->(11')
(8')-b->(P)

 **(P)**
(P)-a->(P)
(P)-b->(P)
(P)-c->(P)

<=================================================>

Minimisation (m) :

>>>    Fusion des Etats : 6'11' et de 11' ...

>>>    Fusion des Etats : 3'8' et de 8' ...
<===================( Automate : #33 )======================>

 # d'états ----------> 7
 # de transitions ---> 21
 Etats --------------> [0', 3'8'8', 4', 4'10', 6', 6'11'11', P]
 Alphabet -----------> [a, b, c]


 **(3'8'8')** -->S
(3'8'8')-a->(3'8'8')
(3'8'8')-b->(P)
(3'8'8')-c->(6'11'11')

 **(6'11'11')** -->S
(6'11'11')-a->(P)
(6'11'11')-b->(P)
(6'11'11')-c->(6'11'11')

E--> **(0')** -->S
(0')-a->(''38)
(0')-b->(''014)
(0')-c->(''116)

 **(4'10')** -->S
(4'10')-a->(P)
(4'10')-b->(4')
(4'10')-c->(6'11'11')

 **(4')**
(4')-a->(P)
(4')-b->(4')
(4')-c->(6')

 **(6')** -->S
(6')-a->(P)
(6')-b->(P)
(6')-c->(P)

 **(P)**
(P)-a->(P)
(P)-b->(P)
(P)-c->(P)

<=================================================>


Langage complémentaire (k) :

<===================( Automate : Complémentaire )======================>

 # d'états ----------> 9
 # de transitions ---> 27
 Etats --------------> [0', 11', 3'8', 4', 4'10', 6', 6'11', 8', P]
 Alphabet -----------> [a, b, c]


E--> **(0')** -->S
(0')-a->(''38)
(0')-b->(''014)
(0')-c->(''116)

 **(6'11')** -->S
(6'11')-c->(11')
(6'11')-a->(P)
(6'11')-b->(P)

 **(11')** -->S
(11')-c->(11')
(11')-a->(P)
(11')-b->(P)

 **(4'10')** -->S
(4'10')-b->(4')
(4'10')-c->(6'11')
(4'10')-a->(P)

 **(4')** -->S
(4')-b->(4')
(4')-c->(6')
(4')-a->(P)

 **(6')** -->S
(6')-a->(P)
(6')-b->(P)
(6')-c->(P)

 **(3'8')** -->S
(3'8')-a->(8')
(3'8')-c->(6'11')
(3'8')-b->(P)

 **(8')** -->S
(8')-a->(8')
(8')-c->(11')
(8')-b->(P)

 **(P)** -->S
(P)-a->(P)
(P)-b->(P)
(P)-c->(P)

<=================================================>